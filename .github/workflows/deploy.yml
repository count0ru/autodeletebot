name: Deploy
on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
env:
  DOCKER_IMAGE: autodeletebot
jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Deploy to staging
        if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "âœ… Staging deployment completed successfully!"
          echo "ðŸ“¦ Docker image pushed to: ghcr.io/${{ github.repository }}:latest"
          echo ""
          echo "ðŸ”§ Add your actual deployment commands here:"
          echo "   - kubectl apply -f k8s/staging/"
          echo "   - docker-compose -f docker-compose.staging.yml up -d"
          echo "   - Your custom deployment script"
      - name: Deploy to production
        if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
        run: |
          echo "ðŸš€ Deploying to production environment..."
          echo "âœ… Production deployment completed successfully!"
          echo "ðŸ“¦ Docker image pushed to: ghcr.io/${{ github.repository }}:latest"
          echo ""
          echo "ðŸ”§ Add your actual deployment commands here:"
          echo "   - kubectl apply -f k8s/production/"
          echo "   - docker-compose -f docker-compose.production.yml up -d"
          echo "   - Your custom deployment script"
      - name: Notify deployment
        run: |
          echo "ðŸ“¢ Deployment completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}"
          echo "Image: ghcr.io/${{ github.repository }}:${{ github.sha }}"
      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            // Only create deployment status if we have a deployment context
            if (context.payload.deployment && context.payload.deployment.id) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: context.payload.deployment.id,
                state: 'success',
                environment_url: '${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}',
                description: 'Deployment completed successfully'
              });
            } else {
              console.log('No deployment context available, skipping deployment status creation');
            }
