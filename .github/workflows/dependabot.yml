name: Dependabot Auto-merge
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
jobs:
  dependabot:
    name: Dependabot
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Enable auto-merge for Dependabot PRs
        run: |
          gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Auto-approve Dependabot PRs
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE',
              body: 'ðŸ¤– **Dependabot Auto-approval**\n\nThis PR updates dependencies and has been automatically approved.\n\n---\n*Automated by GitHub Actions*'
            });
  dependabot-tests:
    name: Dependabot Tests
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && github.event.pull_request.mergeable_state == 'clean'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      - name: Run tests
        run: |
          echo "ðŸ§ª Running tests on updated dependencies..."
          python -m pytest tests/ -v --tb=short
      - name: Comment test results
        uses: actions/github-script@v7
        with:
          script: |
            const results = `ðŸ§ª **Dependabot Test Results**

            âœ… **Tests**: All tests passed with updated dependencies
            ðŸŽ‰ **Ready to merge!**

            ---
            *Automated by GitHub Actions*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: results
            });
